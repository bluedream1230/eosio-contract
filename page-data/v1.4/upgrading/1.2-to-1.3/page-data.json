{"componentChunkName":"component---src-page-templates-content-page-jsx","path":"/v1.4/upgrading/1.2-to-1.3","result":{"data":{"site":{"pathPrefix":"/auto-eosio-cdt"},"allMarkdownRemark":{"nodes":[{"fields":{"slug":"/v1.4/index"}},{"fields":{"slug":"/v20.0/index"}},{"fields":{"slug":"/v1.6/index"}},{"fields":{"slug":"/v1.5/index"}},{"fields":{"slug":"/v20.1/index"}},{"fields":{"slug":"/v2.0/index"}},{"fields":{"slug":"/latest/index"}},{"fields":{"slug":"/v21.0/index"}},{"fields":{"slug":"/v1.4/guides/cmake"}},{"fields":{"slug":"/v1.4/guides/generator-attributes"}},{"fields":{"slug":"/v1.4/guides/first-smart-contract"}},{"fields":{"slug":"/v1.4/tools/eosio-abidiff"}},{"fields":{"slug":"/v1.4/guides/native-tester"}},{"fields":{"slug":"/v1.4/tools/eosio-cpp"}},{"fields":{"slug":"/v1.4/tools/eosio-init"}},{"fields":{"slug":"/latest/guides/first-smart-contract"}},{"fields":{"slug":"/v1.4/tools/eosio-abigen"}},{"fields":{"slug":"/v1.4/tools/eosio-ld"}},{"fields":{"slug":"/v1.4/upgrading/1.5-to-1.6"}},{"fields":{"slug":"/v1.4/upgrading/1.2-to-1.3"}},{"fields":{"slug":"/latest/guides/cmake"}},{"fields":{"slug":"/latest/guides/generator-attributes"}},{"fields":{"slug":"/latest/tools/eosio-abidiff"}},{"fields":{"slug":"/latest/upgrading/1.2-to-1.3"}},{"fields":{"slug":"/latest/upgrading/1.5-to-1.6"}},{"fields":{"slug":"/latest/tools/eosio-cpp"}},{"fields":{"slug":"/latest/tools/eosio-init"}},{"fields":{"slug":"/latest/tools/eosio-abigen"}},{"fields":{"slug":"/latest/guides/native-tester"}},{"fields":{"slug":"/v20.0/guides/first-smart-contract"}},{"fields":{"slug":"/v20.0/guides/cmake"}},{"fields":{"slug":"/v20.0/tools/eosio-abidiff"}},{"fields":{"slug":"/v20.0/guides/generator-attributes"}},{"fields":{"slug":"/latest/tools/eosio-ld"}},{"fields":{"slug":"/v20.0/tools/eosio-abigen"}},{"fields":{"slug":"/v20.0/tools/eosio-init"}},{"fields":{"slug":"/v20.0/tools/eosio-cpp"}},{"fields":{"slug":"/v20.0/tools/eosio-ld"}},{"fields":{"slug":"/v20.0/guides/native-tester"}},{"fields":{"slug":"/v1.6/guides/cmake"}},{"fields":{"slug":"/v20.0/upgrading/1.5-to-1.6"}},{"fields":{"slug":"/v1.6/guides/first-smart-contract"}},{"fields":{"slug":"/v1.6/guides/generator-attributes"}},{"fields":{"slug":"/v1.6/tools/eosio-abigen"}},{"fields":{"slug":"/v1.6/guides/native-tester"}},{"fields":{"slug":"/v1.6/tools/eosio-init"}},{"fields":{"slug":"/v1.6/tools/eosio-cpp"}},{"fields":{"slug":"/v20.0/upgrading/1.2-to-1.3"}},{"fields":{"slug":"/v1.6/tools/eosio-ld"}},{"fields":{"slug":"/v1.5/guides/cmake"}},{"fields":{"slug":"/v1.5/guides/first-smart-contract"}},{"fields":{"slug":"/v1.6/upgrading/1.2-to-1.3"}},{"fields":{"slug":"/v1.5/tools/eosio-abidiff"}},{"fields":{"slug":"/v1.6/upgrading/1.5-to-1.6"}},{"fields":{"slug":"/v1.5/guides/generator-attributes"}},{"fields":{"slug":"/v1.5/tools/eosio-abigen"}},{"fields":{"slug":"/v1.5/tools/eosio-ld"}},{"fields":{"slug":"/v1.5/tools/eosio-cpp"}},{"fields":{"slug":"/v1.5/guides/native-tester"}},{"fields":{"slug":"/v1.5/tools/eosio-init"}},{"fields":{"slug":"/v20.1/guides/first-smart-contract"}},{"fields":{"slug":"/v20.1/guides/cmake"}},{"fields":{"slug":"/v1.5/upgrading/1.5-to-1.6"}},{"fields":{"slug":"/v20.1/guides/generator-attributes"}},{"fields":{"slug":"/v20.1/tools/eosio-abidiff"}},{"fields":{"slug":"/v1.5/upgrading/1.2-to-1.3"}},{"fields":{"slug":"/v20.1/guides/native-tester"}},{"fields":{"slug":"/v1.6/tools/eosio-abidiff"}},{"fields":{"slug":"/v20.1/tools/eosio-init"}},{"fields":{"slug":"/v20.1/upgrading/1.5-to-1.6"}},{"fields":{"slug":"/v2.0/tools/eosio-abidiff"}},{"fields":{"slug":"/v20.1/upgrading/1.2-to-1.3"}},{"fields":{"slug":"/v20.1/tools/eosio-ld"}},{"fields":{"slug":"/v20.1/tools/eosio-cpp"}},{"fields":{"slug":"/v20.1/tools/eosio-abigen"}},{"fields":{"slug":"/v2.0/tools/eosio-ld"}},{"fields":{"slug":"/v2.0/guides/first-smart-contract"}},{"fields":{"slug":"/v2.0/guides/cmake"}},{"fields":{"slug":"/v2.0/tools/eosio-init"}},{"fields":{"slug":"/v2.0/guides/native-tester"}},{"fields":{"slug":"/v2.0/tools/eosio-abigen"}},{"fields":{"slug":"/v21.0/guides/cmake"}},{"fields":{"slug":"/v2.0/guides/generator-attributes"}},{"fields":{"slug":"/v21.0/guides/first-smart-contract"}},{"fields":{"slug":"/v2.0/upgrading/1.2-to-1.3"}},{"fields":{"slug":"/v21.0/guides/generator-attributes"}},{"fields":{"slug":"/v2.0/upgrading/1.5-to-1.6"}},{"fields":{"slug":"/v2.0/tools/eosio-cpp"}},{"fields":{"slug":"/v21.0/tools/eosio-abidiff"}},{"fields":{"slug":"/v21.0/tools/eosio-cpp"}},{"fields":{"slug":"/v21.0/tools/eosio-init"}},{"fields":{"slug":"/v21.0/tools/eosio-ld"}},{"fields":{"slug":"/v21.0/guides/native-tester"}},{"fields":{"slug":"/v21.0/upgrading/1.5-to-1.6"}},{"fields":{"slug":"/v21.0/tools/eosio-abigen"}},{"fields":{"slug":"/v21.0/upgrading/1.2-to-1.3"}}]},"markdownRemark":{"html":"<h2 id=\"version-13\">Version 1.3</h2>\n<h3 id=\"eosiolib-c-api\">eosiolib C API</h3>\n<ul>\n<li>\n<p>Removed the following typedefs to <code class=\"language-text\">uint64_t</code>:</p>\n<ul>\n<li><code class=\"language-text\">account_name</code></li>\n<li><code class=\"language-text\">permission_name</code></li>\n<li><code class=\"language-text\">scope_name</code></li>\n<li><code class=\"language-text\">table_name</code></li>\n<li><code class=\"language-text\">action_name</code></li>\n</ul>\n</li>\n<li>\n<p>Added a <code class=\"language-text\">uint64_t</code> typedef called <code class=\"language-text\">capi_name</code> to replace the removed typedefs above:</p>\n<ul>\n<li>These have been replaced by <code class=\"language-text\">capi_name</code> and as a practice should not be used when writing C++ contract code. Instead, the new version of the <code class=\"language-text\">eosio::name</code> type from the eosiolib C++ API should be used to replace these instances. This decision was made because of bad implicit casting issues with <code class=\"language-text\">uint64_t</code> and the new pattern should allow for better type safety.</li>\n</ul>\n</li>\n<li>\n<p>Removed <code class=\"language-text\">symbol_name</code> typedef:</p>\n<ul>\n<li>This has no C equivalent to replace it. When writing C++ contract code, the <code class=\"language-text\">eosio::symbol_code</code> struct should be used instead. As with the previously mentioned named types, this was removed and replaced with <code class=\"language-text\">eosio::symbol_code</code> to allow for better type safety in contracts.  To use a symbol, i.e. symbol name and precision, use the <code class=\"language-text\">eosio::symbol</code> class.</li>\n</ul>\n</li>\n<li>Removed <code class=\"language-text\">time</code> and <code class=\"language-text\">weight_type</code> typedefs.</li>\n<li>Removed the <code class=\"language-text\">transaction_id_type</code> and <code class=\"language-text\">block_id_type</code> typedefs.</li>\n<li>Removed the <code class=\"language-text\">account_permission</code> struct.</li>\n<li>\n<p>Renamed the following typedefs:</p>\n<ul>\n<li><code class=\"language-text\">checksum160</code> -> <code class=\"language-text\">capi_checksum160</code></li>\n<li><code class=\"language-text\">checksum256</code> -> <code class=\"language-text\">capi_checksum256</code></li>\n<li><code class=\"language-text\">checksum512</code> -> <code class=\"language-text\">capi_checksum512</code></li>\n<li><code class=\"language-text\">public_key</code>  -> <code class=\"language-text\">capi_public_key</code></li>\n<li><code class=\"language-text\">signature</code>   -> <code class=\"language-text\">capi_signature</code></li>\n</ul>\n</li>\n<li>Removed the non-existent intrinsics declarations <code class=\"language-text\">require_write_lock</code> and <code class=\"language-text\">require_read_lock</code>.</li>\n</ul>\n<h3 id=\"eosiolib-c-api-1\">eosiolib C++ API</h3>\n<ul>\n<li>\n<p>Removed eosiolib/vector.hpp:</p>\n<ul>\n<li>Removed alias <code class=\"language-text\">eosio::vector</code> and typedef <code class=\"language-text\">bytes</code>.</li>\n<li>Going forward contract writers should include <code class=\"language-text\">&lt;vector&gt;</code> from the STL and use <code class=\"language-text\">std::vector&lt;char&gt;</code> instead of bytes.</li>\n</ul>\n</li>\n<li>Removed eosiolib/types.hpp.</li>\n<li>Removed eosiolib/optional.hpp. Use <code class=\"language-text\">std::optional</code> as a replacement.</li>\n<li>Removed eosiolib/core_symbol.hpp. The contract writer should explicitly specify the symbol.</li>\n<li>Added eosiolib/name.hpp.</li>\n</ul>\n<h4 id=\"eosiolibtypeshpp\">eosiolib/types.hpp</h4>\n<ul>\n<li>Moved the typedef <code class=\"language-text\">eosio::extensions_types</code> to eosiolib/transaction.hpp.</li>\n<li>Removed comparison functions for <code class=\"language-text\">checksum</code> structs.</li>\n<li>Removal of <code class=\"language-text\">eosio::char_to_symbol</code>, <code class=\"language-text\">eosio::string_to_name</code>, <code class=\"language-text\">eosio::name_suffix</code> functions</li>\n<li>Removal of the <code class=\"language-text\">N</code> macro. The <code class=\"language-text\">&quot;&quot;_n</code> operator or the <code class=\"language-text\">name</code> constructor should be used as a type safe replacement. Example: <code class=\"language-text\">N(foo)</code> -> <code class=\"language-text\">&quot;foo&quot;_n</code>, or <code class=\"language-text\">N(foo)</code> -> <code class=\"language-text\">name(&quot;foo&quot;)</code>.</li>\n<li>Moved <code class=\"language-text\">eosio::name</code> struct definition and <code class=\"language-text\">&quot;&quot;_n</code> operator to eosiolib/name.hpp.</li>\n</ul>\n<h4 id=\"eosiolibnamehpp\">eosiolib/name.hpp</h4>\n<ul>\n<li>Removed implicit and explicit conversions to <code class=\"language-text\">uint64_t</code>.</li>\n<li>Added <code class=\"language-text\">enum class</code> <code class=\"language-text\">eosio::name::raw</code> which is implicitly converted from an <code class=\"language-text\">eosio::name</code> (used for template non-type parameters).</li>\n<li>Added <code class=\"language-text\">bool</code> conversion operator for conditionally testing if a name is empty.</li>\n<li>All constructors are now <code class=\"language-text\">constexpr</code>. These take either a <code class=\"language-text\">uint64_t</code>, an <code class=\"language-text\">eosio::name::raw</code> or a <code class=\"language-text\">std::string_view</code>.</li>\n<li>Added <code class=\"language-text\">constexpr</code> methods <code class=\"language-text\">eosio::name::length</code> and <code class=\"language-text\">eosio::name::suffix</code>.</li>\n<li>Added equivalence, inverted equivalence and less than operators to <code class=\"language-text\">eosio::name</code>.</li>\n</ul>\n<h4 id=\"eosiolibsymbolhpp\">eosiolib/symbol.hpp</h4>\n<ul>\n<li>Removed <code class=\"language-text\">eosio::symbol_type</code> struct and replaced with <code class=\"language-text\">eosio::symbol</code> class.</li>\n<li>\n<p>Added struct <code class=\"language-text\">eosio::symbol_code</code>:</p>\n<ul>\n<li>Added two <code class=\"language-text\">constexpr</code> constructors that take either a raw <code class=\"language-text\">uint64_t</code> or an <code class=\"language-text\">std::string_view</code>.</li>\n<li>Added <code class=\"language-text\">constexpr</code> methods <code class=\"language-text\">is_valid</code>, <code class=\"language-text\">length</code> and <code class=\"language-text\">raw</code>.</li>\n<li>Added a print method.</li>\n<li>Added <code class=\"language-text\">bool</code> conversion operator to test is <code class=\"language-text\">symbol_code</code> is empty.</li>\n</ul>\n</li>\n<li>Removed <code class=\"language-text\">eosio::string_to_symbol</code>, <code class=\"language-text\">eosio::is_valid_symbol</code>, <code class=\"language-text\">eosio::symbol_name_length</code> functions.</li>\n<li>Removed the <code class=\"language-text\">S</code> macro. The symbol constructor should be used as a type safe replacement. Example: <code class=\"language-text\">S(4,SYS)</code> -> <code class=\"language-text\">symbol(symbol_code(&quot;SYS&quot;), 4)</code> (or simply <code class=\"language-text\">symbol(&quot;SYS&quot;, 4)</code> as of v1.3.1).</li>\n<li>\n<p>Added struct <code class=\"language-text\">eosio::symbol</code>:</p>\n<ul>\n<li>Added three <code class=\"language-text\">constexpr</code> constructors that take either a raw <code class=\"language-text\">uint64_t</code>, <code class=\"language-text\">symbol_code</code> and a <code class=\"language-text\">uint8_t</code> precision or an <code class=\"language-text\">std::string_view</code> and a <code class=\"language-text\">uint8_t</code> precision.</li>\n<li>Added <code class=\"language-text\">constexpr</code> methods <code class=\"language-text\">is_valid</code>, <code class=\"language-text\">precision</code>, <code class=\"language-text\">code</code>, and <code class=\"language-text\">raw</code>. These, respectively, check if the <code class=\"language-text\">symbol</code> is valid, get the <code class=\"language-text\">uint8_t</code> precision, get the <code class=\"language-text\">symbol_code</code> part of the <code class=\"language-text\">symbol</code>, and get the raw <code class=\"language-text\">uint64_t</code> representation of <code class=\"language-text\">symbol</code>.</li>\n<li>Added equivalence, inverted equivalence and less than operators to <code class=\"language-text\">eosio::symbol</code>.</li>\n</ul>\n</li>\n<li>\n<p>Modified struct <code class=\"language-text\">eosio::extended_symbol</code>:</p>\n<ul>\n<li>Restricted fields to private.</li>\n<li>Added <code class=\"language-text\">constexpr</code> constructor that takes a <code class=\"language-text\">eosio::symbol</code> and an <code class=\"language-text\">eosio::name</code>.</li>\n<li>Added <code class=\"language-text\">constexpr</code> methods <code class=\"language-text\">get_symbol</code> and <code class=\"language-text\">get_contract</code>.</li>\n<li>Made existing comparison operators <code class=\"language-text\">constexpr</code>.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"eosiolibassethpp\">eosiolib/asset.hpp</h4>\n<ul>\n<li>The main constructor now requires a <code class=\"language-text\">int64_t</code> (quantity) and <code class=\"language-text\">eosio::symbol</code> explicitly.</li>\n<li>The default constructor no longer initializes the instance to a valid zero quantity asset with a symbol equivalent to \"core symbol\". Instead the default constructed <code class=\"language-text\">eosio::asset</code> is a bit representation of all zeros (which will cause <code class=\"language-text\">is_valid</code> to fail) so that check is bypassed to allow for <code class=\"language-text\">multi_index</code> and <code class=\"language-text\">datastream</code> to work.</li>\n<li>Old contracts that use <code class=\"language-text\">eosio::asset()</code> should be changed to either use the core symbol of the specific chain they are targeting i.e. <code class=\"language-text\">eosio::asset(0, symbol(symbol_code(&quot;SYS&quot;),4))</code>. To reduce writing <code class=\"language-text\">symbol(symbol_code(&quot;SYS&quot;),4)</code> over and over, a <code class=\"language-text\">constexpr</code> function to return the symbol or <code class=\"language-text\">constexpr</code> global variable should be used.</li>\n</ul>\n<h4 id=\"eosiolibcontracthpp\">eosiolib/contract.hpp</h4>\n<ul>\n<li>The constructor for <code class=\"language-text\">eosio::contract</code> now takes an <code class=\"language-text\">eosio::name</code> for the receiver, an <code class=\"language-text\">eosio::name</code> for the code, and a <code class=\"language-text\">eosio::datastream&lt;const char*&gt;</code> for the datastream used for the contract.  The last argument is for manually unpacking an action, see the section on <code class=\"language-text\">eosio::ignore</code> for a more indepth usage.</li>\n</ul>\n<h4 id=\"eosiolibdispatcherhpp\">eosiolib/dispatcher.hpp</h4>\n<ul>\n<li>Renamed the macro <code class=\"language-text\">EOSIO_ABI</code> to <code class=\"language-text\">EOSIO_DISPATCH</code> as this is more descriptive of what this macro actually does.</li>\n<li>Modified the definition of <code class=\"language-text\">EOSIO_DISPATCH</code> to work with the new constructor for <code class=\"language-text\">eosio::contract</code>.</li>\n</ul>\n<h4 id=\"eosiolibmulti_indexhpp\">eosiolib/multi_index.hpp</h4>\n<ul>\n<li>The first template parameter for <code class=\"language-text\">indexed_by</code> now requires the argument be convertible to <code class=\"language-text\">eosio::name::raw</code> (replacing <code class=\"language-text\">uint64_t</code>).</li>\n<li>The first template parameter for <code class=\"language-text\">multi_index</code> now requires the argument be convertible to <code class=\"language-text\">eosio::name::raw</code> (replacing <code class=\"language-text\">uint64_t</code>).</li>\n<li>The constructor now takes an <code class=\"language-text\">eosio::name</code> type for the code (replacing <code class=\"language-text\">uint64_t</code>). Scope is still <code class=\"language-text\">uint64_t</code>.</li>\n<li>Various other replacements of <code class=\"language-text\">uint64_t</code> to <code class=\"language-text\">eosio::name</code>.</li>\n</ul>\n<h4 id=\"eosiolibsingletonhpp\">eosiolib/singleton.hpp</h4>\n<ul>\n<li>The first template parameter for <code class=\"language-text\">eosio::singleton</code> now requires the argument be convertible to <code class=\"language-text\">eosio::name::raw</code> (replacing <code class=\"language-text\">uint64_t</code>).</li>\n<li>The constructor now takes an <code class=\"language-text\">eosio::name</code> type for the code.</li>\n<li>In the methods <code class=\"language-text\">get_or_create</code> and <code class=\"language-text\">set</code>, the argument <code class=\"language-text\">bill_to_account</code> is now of type <code class=\"language-text\">eosio::name</code> (replacing <code class=\"language-text\">uint64_t</code>).</li>\n</ul>\n<h4 id=\"eosiolibactionhpp\">eosiolib/action.hpp</h4>\n<ul>\n<li>Added C++ function <code class=\"language-text\">eosio::require_auth</code>.</li>\n<li>Added C++ function <code class=\"language-text\">eosio::has_auth</code>.</li>\n<li>Added C++ function <code class=\"language-text\">eosio::is_account</code>.</li>\n<li>Redefined <code class=\"language-text\">eosio::permission_level</code> to use <code class=\"language-text\">eosio::name</code> in place of <code class=\"language-text\">uint64_t</code>.</li>\n<li>Removed the macro <code class=\"language-text\">ACTION</code>. (The identifier <code class=\"language-text\">ACTION</code> has been reused for another macro described below in the Macros section.)</li>\n</ul>\n<h4 id=\"eosiolibpermissionhpp\">eosiolib/permission.hpp</h4>\n<ul>\n<li>The optional provided_keys argument of the function <code class=\"language-text\">eosio::check_transaction_authorization</code> is now of the type <code class=\"language-text\">std::set&lt;eosio::public_key&gt;</code> rather than the type <code class=\"language-text\">std::set&lt;capi_public_key&gt;</code>. C++ contract code should most likely be using the <code class=\"language-text\">eosio::public_key</code> struct (defined in \"eosiolib/public_key.hpp\") if they need to deal with EOSIO-compatible public keys rather than the <code class=\"language-text\">capi_public_key</code> struct (now renamed from its original name of <code class=\"language-text\">::public_key</code>) from the eosiolib C API. Note that existing contract code that just referred to the type <code class=\"language-text\">public_key</code> without namespace qualification may have accidentally been using the <code class=\"language-text\">capi_public_key</code> struct and therefore should ideally be modified to use the <code class=\"language-text\">eosio::public_key</code> C++ type.</li>\n<li>The <code class=\"language-text\">account</code> and <code class=\"language-text\">permission</code> arguments of <code class=\"language-text\">eosio::check_permission_authorization</code> are both <code class=\"language-text\">eosio::name</code> now instead of <code class=\"language-text\">uint64_t</code>.</li>\n</ul>\n<h4 id=\"eosiolibignorehpp\">eosiolib/ignore.hpp</h4>\n<ul>\n<li>\n<p>Added new type <code class=\"language-text\">ignore</code>:</p>\n<ul>\n<li>\n<p>This type acts as a placeholder for actions that don't want to deserialize their fields but want the types to be reflected in the ABI.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ACTION action(ignore&lt;some_type&gt;) { some_type st; _ds &gt;&gt; st; }</code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>Added new type <code class=\"language-text\">ignore_wrapper</code>:</p>\n<ul>\n<li>This allows for calling <code class=\"language-text\">SEND_INLINE_ACTION</code> with <code class=\"language-text\">ignore_wrapper(some_value)</code> against an action with an <code class=\"language-text\">ignore</code> of matching types.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"macros\">Macros</h3>\n<ul>\n<li>Added <code class=\"language-text\">ACTION</code> macro which is simply a shortcut for <code class=\"language-text\">[[eosio::action]] void</code>.</li>\n<li>Added <code class=\"language-text\">TABLE</code> macro which is simply a shortcut for <code class=\"language-text\">struct [[eosio::table]]</code>.</li>\n<li>Added <code class=\"language-text\">CONTRACT</code> macro which is simply a shortcut for <code class=\"language-text\">class [[eosio::contract]]</code>.</li>\n</ul>\n<h3 id=\"cmake\">CMake</h3>\n<ul>\n<li>Added <code class=\"language-text\">eosio.cdt-config.cmake</code> to allow for <code class=\"language-text\">find_package(eosio.cdt)</code>. See eosio.cdt/examples/hello or eosio.cdt/examples/template for an example.</li>\n<li>Added new macro <code class=\"language-text\">add_contract</code>. This new contract takes a contract name, cmake target, then any normal arguments you would give to <code class=\"language-text\">add_executable</code>. See eosio.cdt/examples/hello or eosio.cdt/examples/template.</li>\n<li>New version checking mechanism is included. See eosio.contracts/CMakeLists.txt to see this in use.</li>\n</ul>\n<h3 id=\"libc\">libc</h3>\n<ul>\n<li>Replaced <code class=\"language-text\">printf</code>, <code class=\"language-text\">sprintf</code>, and <code class=\"language-text\">snprintf</code> with new minimal variants. This allows contracts to use these functions without causing stack overflow issues.</li>\n</ul>\n<h3 id=\"libcxx\">libcxx</h3>\n<ul>\n<li>Removed <code class=\"language-text\">sstream</code> with the intent to return this after more has been done.</li>\n<li>Added <code class=\"language-text\">__cxa_pure_virtual</code> to allow for pure virtual methods in contract classes.</li>\n<li><code class=\"language-text\">std::to_string</code> now works without the issues of stack overflows.</li>\n</ul>\n<h3 id=\"attributes\">attributes</h3>\n<ul>\n<li>Added <code class=\"language-text\">[[eosio::ignore]]</code> attribute to flag a type as being ignored by the deserializer. This attribute is primarily only used for internal use within eosiolib.</li>\n<li>\n<p>Added <code class=\"language-text\">[[eosio::contract]]</code> attribute. This new attribute is used to mark a contract class as \"contract\" with the name being either the C++ name of the class or a user specified name (i.e. <code class=\"language-text\">[[eosio::contract(&quot;somecontract&quot;)]]</code>). This attribute can also be used in conjunction with the <code class=\"language-text\">eosio::action</code> and <code class=\"language-text\">eosio::table</code> attributes for tables that you would like to define outside of the <code class=\"language-text\">eosio::contract</code> class.  This is used in conjunction with either the raw <code class=\"language-text\">eosio-cpp</code> option <code class=\"language-text\">--contract &lt;name&gt;</code>, <code class=\"language-text\">-o &lt;name&gt;.wasm</code> or with CMake <code class=\"language-text\">add_contract</code>.  It acts as a filter enabling contract developers to include a header file with attributes from another contract (e.g. eosio.token) while generating an ABI devoid of those actions and tables.</p>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">#include &lt;eosiolib/eosio.hpp&gt;\nusing namespace eosio;\nCONTRACT test : public eosio::contract {\npublic:\n   using contract::contract;\n   ACTION acta(){}\n   TABLE taba {\n      uint64_t a;\n      float b;\n      uint64_t primary_key() const { return a; }\n   };\n};\nstruct [[eosio::table, eosio::contract(&quot;test&quot;)]]\ntabb {\n   uint64_t a;\n   int b;\n};\ntypedef eosio::multi_index&lt;&quot;testtaba&quot;_n, test::taba&gt; table_a;\ntypedef eosio::multi_index&lt;&quot;testtabb&quot;_n, tabb&gt; table_b;\nEOSIO_DISPATCH( test, (acta) )</code></pre></div>\n<p>The above code will produce the tables <code class=\"language-text\">testtaba</code> and <code class=\"language-text\">testtabb</code> in your ABI. Example: <code class=\"language-text\">eosio-cpp -abigen test.cpp -o test.wasm</code> will mark this compilation and ABI generation for the <code class=\"language-text\">eosio::contract</code> <code class=\"language-text\">test</code>. The same thing can be done with <code class=\"language-text\">eosio-cpp -abigen test.cpp -o test_contract.wasm --contract test</code> or with the CMake command <code class=\"language-text\">add_contract( test, test_contract, test.cpp )</code>. Either of the previous two approaches will produce a test_contract.wasm and test_contract.abi generated under the context of the contract name of <code class=\"language-text\">test</code>.</p>\n</li>\n</ul>\n<h3 id=\"boost\">Boost</h3>\n<ul>\n<li>Boost is now part of the library. No more external dependence on Boost and all system inclusion are within it's <code class=\"language-text\">sysroot</code>. (Boost will be removed in a future release.)</li>\n</ul>\n<h2 id=\"abi-generator-attributes\">ABI generator attributes</h2>\n<p>Unlike the old ABI generator tool, the new tool uses C++11 or GNU style attributes to mark <code class=\"language-text\">actions</code> and <code class=\"language-text\">tables</code>.</p>\n<h4 id=\"eosioaction\">[[eosio::action]]</h4>\n<p>This attribute marks either a struct or a method as an action.\nExample (four ways to declare an action for ABI generation):</p>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">// this is the C++11 and greater style attribute\n[[eosio::action]]\nvoid testa( name n ) {\n   // do something\n}\n\n// this is the GNU style attribute, this can be used in C code and prior to C++ 11\n__attribute__((eosio_action))\nvoid testa( name n ){\n   // do something\n}\n\nstruct [[eosio::action]] testa {\n   name n;\n   EOSLIB_SERIALIZE( testa, (n) )\n};\n\nstruct __attribute__((eosio_action)) testa {\n   name n;\n   EOSLIB_SERIALIZE( testa, (n) )\n};</code></pre></div>\n<p>If your action name is not a valid <a href=\"https://developers.eos.io/eosio-cpp/docs/naming-conventions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">EOSIO name</a> you can explicitly specify the name in the attribute <code class=\"language-text\">c++ [[eosio::action(&quot;&lt;valid action name&gt;&quot;)]]</code></p>\n<p>Example (two ways to declare a table for ABI generation):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">struct [[eosio::table]] testtable {\n   uint64_t owner;\n   /* all other fields */\n};\n\nstruct __attribute__((eosio_table)) testtable {\n   uint64_t owner;\n   /* all other fields */\n};\n\ntypedef eosio::multi_index&lt;&quot;tablename&quot;_n, testtable&gt; testtable_t;</code></pre></div>\n<p>If you don't want to use the multi-index you can explicitly specify the name in the attribute <code class=\"language-text\">c++ [[eosio::table(&quot;&lt;valid action name&gt;&quot;)]]</code>.</p>\n<p>For an example contract of ABI generation please see the file ./examples/abigen_test/test.cpp. You can generate the ABI for this file with <code class=\"language-text\">eosio-abigen test.cpp --output=test.abi</code>.</p>\n<h3 id=\"fixing-an-abi-or-writing-an-abi-manually\">Fixing an ABI or Writing an ABI Manually</h3>\n<ul>\n<li>The sections to the ABI are pretty simple to understand and the syntax is purely JSON, so it is reasonable to write an ABI file manually.</li>\n<li>The ABI generation will never be completely perfect for every contract written. Advanced features of the newest version of the ABI will require manual construction of the ABI, and odd and advanced C++ patterns could capsize the generators type deductions. So having a good knowledge of how to write an ABI should be an essential piece of knowledge of a smart contract writer.</li>\n<li>Please refer to <a href=\"https://developers.eos.io/eosio-cpp/docs/how-to-write-an-abi\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">developers.eos.io \"How to Write an ABI File\"</a> to learn about the different sections of an ABI.</li>\n</ul>\n<h3 id=\"adding-ricardian-contracts-and-clauses-to-abi\">Adding Ricardian Contracts and Clauses to ABI</h3>\n<ul>\n<li>As of EOSIO.CDT v1.4.0 the ABI generator will try to automatically import contracts and clauses into the generated ABI.  There are a few caveats to this, one is a strict naming policy of the files and an HTML tag used to mark each Ricardian contract and each clause.</li>\n<li>The Ricardian contracts should be housed in a file with the name <contract name>.contracts.md and the clauses should be in a file named <contract name>.clauses.md.</li>\n<li>For each Ricardian contract the header <code class=\"language-text\">&lt;h1 class=&quot;contract&quot;&gt;ActionName&lt;/h1&gt;</code> should be used, as this directs the ABI generator to attach this Ricardian contract to the specified action.</li>\n<li>For each Ricardian clause the header <code class=\"language-text\">&lt;h1 class=&quot;clause&quot;&gt;ClauseID&lt;/h1&gt;</code> should be used, as this directs the ABI generator to the clause id and the subsequent body.</li>\n<li>The option <code class=\"language-text\">-R</code> has been added to eosio-cpp and eosio-abigen to add \"resource\" paths to search from, so you can place these files in any directory structure you like and use <code class=\"language-text\">-R&lt;path to file&gt;</code> in the same vein as <code class=\"language-text\">-I</code> for include paths.</li>\n<li>To see these in use please see ./examples/hello/hello.contracts.md and ./examples/hello/hello.clauses.md.</li>\n</ul>\n<h2 id=\"license\">License</h2>\n<p>MIT</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/auto-eosio-cdt/v1.4/upgrading/1.2-to-1.3/#version-13\">Version 1.3</a></p>\n<ul>\n<li><a href=\"/auto-eosio-cdt/v1.4/upgrading/1.2-to-1.3/#eosiolib-c-api\">eosiolib C API</a></li>\n<li>\n<p><a href=\"/auto-eosio-cdt/v1.4/upgrading/1.2-to-1.3/#eosiolib-c-api-1\">eosiolib C++ API</a></p>\n<ul>\n<li><a href=\"/auto-eosio-cdt/v1.4/upgrading/1.2-to-1.3/#eosiolibtypeshpp\">eosiolib/types.hpp</a></li>\n<li><a href=\"/auto-eosio-cdt/v1.4/upgrading/1.2-to-1.3/#eosiolibnamehpp\">eosiolib/name.hpp</a></li>\n<li><a href=\"/auto-eosio-cdt/v1.4/upgrading/1.2-to-1.3/#eosiolibsymbolhpp\">eosiolib/symbol.hpp</a></li>\n<li><a href=\"/auto-eosio-cdt/v1.4/upgrading/1.2-to-1.3/#eosiolibassethpp\">eosiolib/asset.hpp</a></li>\n<li><a href=\"/auto-eosio-cdt/v1.4/upgrading/1.2-to-1.3/#eosiolibcontracthpp\">eosiolib/contract.hpp</a></li>\n<li><a href=\"/auto-eosio-cdt/v1.4/upgrading/1.2-to-1.3/#eosiolibdispatcherhpp\">eosiolib/dispatcher.hpp</a></li>\n<li><a href=\"/auto-eosio-cdt/v1.4/upgrading/1.2-to-1.3/#eosiolibmulti_indexhpp\">eosiolib/multi_index.hpp</a></li>\n<li><a href=\"/auto-eosio-cdt/v1.4/upgrading/1.2-to-1.3/#eosiolibsingletonhpp\">eosiolib/singleton.hpp</a></li>\n<li><a href=\"/auto-eosio-cdt/v1.4/upgrading/1.2-to-1.3/#eosiolibactionhpp\">eosiolib/action.hpp</a></li>\n<li><a href=\"/auto-eosio-cdt/v1.4/upgrading/1.2-to-1.3/#eosiolibpermissionhpp\">eosiolib/permission.hpp</a></li>\n<li><a href=\"/auto-eosio-cdt/v1.4/upgrading/1.2-to-1.3/#eosiolibignorehpp\">eosiolib/ignore.hpp</a></li>\n</ul>\n</li>\n<li><a href=\"/auto-eosio-cdt/v1.4/upgrading/1.2-to-1.3/#macros\">Macros</a></li>\n<li><a href=\"/auto-eosio-cdt/v1.4/upgrading/1.2-to-1.3/#cmake\">CMake</a></li>\n<li><a href=\"/auto-eosio-cdt/v1.4/upgrading/1.2-to-1.3/#libc\">libc</a></li>\n<li><a href=\"/auto-eosio-cdt/v1.4/upgrading/1.2-to-1.3/#libcxx\">libcxx</a></li>\n<li><a href=\"/auto-eosio-cdt/v1.4/upgrading/1.2-to-1.3/#attributes\">attributes</a></li>\n<li><a href=\"/auto-eosio-cdt/v1.4/upgrading/1.2-to-1.3/#boost\">Boost</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/auto-eosio-cdt/v1.4/upgrading/1.2-to-1.3/#abi-generator-attributes\">ABI generator attributes</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/auto-eosio-cdt/v1.4/upgrading/1.2-to-1.3/#eosioaction\">[eosio::action]</a></li>\n</ul>\n</li>\n<li><a href=\"/auto-eosio-cdt/v1.4/upgrading/1.2-to-1.3/#fixing-an-abi-or-writing-an-abi-manually\">Fixing an ABI or Writing an ABI Manually</a></li>\n<li><a href=\"/auto-eosio-cdt/v1.4/upgrading/1.2-to-1.3/#adding-ricardian-contracts-and-clauses-to-abi\">Adding Ricardian Contracts and Clauses to ABI</a></li>\n</ul>\n</li>\n<li><a href=\"/auto-eosio-cdt/v1.4/upgrading/1.2-to-1.3/#license\">License</a></li>\n</ul>","frontmatter":{"edit_link":null,"request_changes_link":null},"fields":{"articleTitle":"upgrading12-to-13","contentTitle":"1 2 to 1 3","headTagTitle":"upgrading12-to-13","internalSummary":"/usr/local/lib/python3.6/dist-packages/thorka-0.1-py3.6.egg/src/lib/gatsby/data/v1.4/SUMMARY.json","isCollection":false,"isRoot":true,"isTagged":true,"organization":"EOSIO","originalKey":"/","pathData":"{\"tagged\":true,\"parentPath\":\"v1.4/upgrading\",\"collectionPath\":\"/\",\"rootDirPath\":\"v1.4\",\"filename\":\"1.2-to-1.3.md\"}","repository":"auto-eosio-cdt","showSearch":true,"slug":"/v1.4/upgrading/1.2-to-1.3","tagsList":"[{\"beta\":1,\"build\":0,\"deprecated\":false,\"latest\":false,\"rc\":0,\"tag\":\"v21.0.1-beta1\",\"tag_reduced\":\"21.0\",\"tag_reduced_friendly\":\"v21.0\",\"tag_sanitized\":\"21.0.1-beta1\",\"summaryPath\":\"/usr/local/lib/python3.6/dist-packages/thorka-0.1-py3.6.egg/src/lib/gatsby/data/v21.0/SUMMARY.json\",\"importedSummary\":\"N/A\",\"version\":\"v21.0\"},{\"beta\":null,\"build\":0,\"deprecated\":false,\"latest\":false,\"rc\":0,\"tag\":\"20.1.0-beta\",\"tag_reduced\":\"20.1\",\"tag_reduced_friendly\":\"v20.1\",\"tag_sanitized\":\"20.1.0-beta\",\"summaryPath\":\"/usr/local/lib/python3.6/dist-packages/thorka-0.1-py3.6.egg/src/lib/gatsby/data/v20.1/SUMMARY.json\",\"importedSummary\":\"N/A\",\"version\":\"v20.1\"},{\"beta\":0,\"build\":0,\"deprecated\":false,\"latest\":true,\"rc\":0,\"tag\":\"20.0.6\",\"tag_reduced\":\"20.0\",\"tag_reduced_friendly\":\"v20.0\",\"tag_sanitized\":\"20.0.6\",\"summaryPath\":\"/usr/local/lib/python3.6/dist-packages/thorka-0.1-py3.6.egg/src/lib/gatsby/data/latest/SUMMARY.json\",\"importedSummary\":\"N/A\",\"version\":\"latest\"},{\"beta\":0,\"build\":0,\"deprecated\":false,\"latest\":false,\"rc\":0,\"tag\":\"v20.0.5\",\"tag_reduced\":\"20.0\",\"tag_reduced_friendly\":\"v20.0\",\"tag_sanitized\":\"20.0.5\",\"summaryPath\":\"/usr/local/lib/python3.6/dist-packages/thorka-0.1-py3.6.egg/src/lib/gatsby/data/v20.0/SUMMARY.json\",\"importedSummary\":\"N/A\",\"version\":\"v20.0\"},{\"beta\":9,\"build\":0,\"deprecated\":false,\"latest\":false,\"rc\":0,\"tag\":\"v2.0.0-beta9\",\"tag_reduced\":\"2.0\",\"tag_reduced_friendly\":\"v2.0\",\"tag_sanitized\":\"2.0.0-beta9\",\"summaryPath\":\"/usr/local/lib/python3.6/dist-packages/thorka-0.1-py3.6.egg/src/lib/gatsby/data/v2.0/SUMMARY.json\",\"importedSummary\":\"N/A\",\"version\":\"v2.0\"},{\"beta\":0,\"build\":0,\"deprecated\":false,\"latest\":false,\"rc\":0,\"tag\":\"v1.6.21\",\"tag_reduced\":\"1.6\",\"tag_reduced_friendly\":\"v1.6\",\"tag_sanitized\":\"1.6.21\",\"summaryPath\":\"/usr/local/lib/python3.6/dist-packages/thorka-0.1-py3.6.egg/src/lib/gatsby/data/v1.6/SUMMARY.json\",\"importedSummary\":\"N/A\",\"version\":\"v1.6\"},{\"beta\":0,\"build\":0,\"deprecated\":false,\"latest\":false,\"rc\":0,\"tag\":\"v1.5.0\",\"tag_reduced\":\"1.5\",\"tag_reduced_friendly\":\"v1.5\",\"tag_sanitized\":\"1.5.0\",\"summaryPath\":\"/usr/local/lib/python3.6/dist-packages/thorka-0.1-py3.6.egg/src/lib/gatsby/data/v1.5/SUMMARY.json\",\"importedSummary\":\"N/A\",\"version\":\"v1.5\"},{\"beta\":0,\"build\":0,\"deprecated\":false,\"latest\":false,\"rc\":0,\"tag\":\"v1.4.1\",\"tag_reduced\":\"1.4\",\"tag_reduced_friendly\":\"v1.4\",\"tag_sanitized\":\"1.4.1\",\"summaryPath\":\"/usr/local/lib/python3.6/dist-packages/thorka-0.1-py3.6.egg/src/lib/gatsby/data/v1.4/SUMMARY.json\",\"importedSummary\":\"N/A\",\"version\":\"v1.4\"}]","latestDDVersion":"latest","importedSummary":"N/A","hasPrimaryNavigation":false,"primaryNavData":"[{\"text\":\"NONE\",\"path\":\"EMPTY\"}]","currentVersion":"v1.4","currentDDVersion":"1.4","summaryJson":"{\"array\":[{\"sub\":[{\"title\":\"Cmake\",\"link\":\"guides/cmake.md\"},{\"title\":\"First smart contract\",\"link\":\"guides/first-smart-contract.md\"},{\"title\":\"Generator attributes\",\"link\":\"guides/generator-attributes.md\"},{\"title\":\"Native tester\",\"link\":\"guides/native-tester.md\"}],\"title\":\"Guides\"},{\"sub\":[{\"title\":\"Eosio abidiff\",\"link\":\"tools/eosio-abidiff.md\"},{\"title\":\"Eosio abigen\",\"link\":\"tools/eosio-abigen.md\"},{\"title\":\"Eosio cpp\",\"link\":\"tools/eosio-cpp.md\"},{\"title\":\"Eosio init\",\"link\":\"tools/eosio-init.md\"},{\"title\":\"Eosio ld\",\"link\":\"tools/eosio-ld.md\"}],\"title\":\"Tools\"},{\"sub\":[{\"title\":\"1 2 to 1 3\",\"link\":\"upgrading/1.2-to-1.3.md\"},{\"title\":\"1 5 to 1 6\",\"link\":\"upgrading/1.5-to-1.6.md\"}],\"title\":\"Upgrading\"}],\"title\":[]}"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/v1.4/upgrading/1.2-to-1.3"}}}