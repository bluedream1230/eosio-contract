{"componentChunkName":"component---src-page-templates-content-page-jsx","path":"/latest/action-reference/eosio.msig/index","result":{"data":{"site":{"pathPrefix":"/eosio.contracts"},"allMarkdownRemark":{"nodes":[{"fields":{"slug":"/latest/build-and-deploy"}},{"fields":{"slug":"/latest/guides/how-to-create-issue-and-transfer-a-token"}},{"fields":{"slug":"/latest/guides/how-to-buy-ram"}},{"fields":{"slug":"/latest/index"}},{"fields":{"slug":"/latest/guides/how-to-sign-a-multisig-transaction-with-eosio.msig"}},{"fields":{"slug":"/latest/guides/how-to-stake"}},{"fields":{"slug":"/latest/guides/how-to-vote"}},{"fields":{"slug":"/latest/guides/upgrading-the-eosio.system-contract"}},{"fields":{"slug":"/latest/action-reference/eosio.msig/index"}},{"fields":{"slug":"/latest/action-reference/eosio.system/exchange_state"}},{"fields":{"slug":"/latest/action-reference/eosio.system/native"}},{"fields":{"slug":"/latest/action-reference/eosio.system/rex.results"}},{"fields":{"slug":"/latest/action-reference/eosio.system/index"}},{"fields":{"slug":"/latest/action-reference/eosio.bios/index"}},{"fields":{"slug":"/latest/action-reference/eosio.wrap/index"}},{"fields":{"slug":"/latest/action-reference/eosio.token/index"}},{"fields":{"slug":"/latest/guides/how-to-use-eosio.wrap"}}]},"markdownRemark":{"html":"<h2 id=\"multisig\">multisig</h2>\n<p><strong>Type:</strong> <code class=\"language-text\">class</code></p>\n<p>eosio.msig contract defines the structures and actions needed to manage the proposals and approvals on blockchain. </p>\n<h2 id=\"propose\">propose</h2>\n<p><strong>Type:</strong> <code class=\"language-text\">void</code></p>\n<p>Create proposal </p>\n<p>Allows an account <code class=\"language-text\">proposer</code> to make a proposal <code class=\"language-text\">proposal_name</code> which has <code class=\"language-text\">requested</code>\npermission levels expected to approve the proposal, and if approved by all expected\npermission levels then <code class=\"language-text\">trx</code> transaction can we executed by this proposal.\nThe <code class=\"language-text\">proposer</code> account is authorized and the <code class=\"language-text\">trx</code> transaction is verified if it was\nauthorized by the provided keys and permissions, and if the proposal name doesnâ€™t\nalready exist; if all validations pass the <code class=\"language-text\">proposal_name</code> and <code class=\"language-text\">trx</code> trasanction are\nsaved in the proposals table and the <code class=\"language-text\">requested</code> permission levels to the\napprovals table (for the <code class=\"language-text\">proposer</code> context). Storage changes are billed to <code class=\"language-text\">proposer</code>. </p>\n<table>\n<thead>\n<tr>\n<th>Parameter Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>proposer</td>\n<td>- The account proposing a transaction</td>\n</tr>\n<tr>\n<td>proposal_name</td>\n<td>- The name of the proposal (should be unique for proposer)</td>\n</tr>\n<tr>\n<td>requested</td>\n<td>- Permission levels expected to approve the proposal</td>\n</tr>\n<tr>\n<td>trx</td>\n<td>- Proposed transaction</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"approve\">approve</h2>\n<p><strong>Type:</strong> <code class=\"language-text\">void</code></p>\n<p>Approve proposal </p>\n<p>Allows an account, the owner of <code class=\"language-text\">level</code> permission, to approve a proposal <code class=\"language-text\">proposal_name</code>\nproposed by <code class=\"language-text\">proposer</code>. If the proposal's requested approval list contains the <code class=\"language-text\">level</code>\npermission then the <code class=\"language-text\">level</code> permission is moved from internal <code class=\"language-text\">requested_approvals</code> list to\ninternal <code class=\"language-text\">provided_approvals</code> list of the proposal, thus persisting the approval for\nthe <code class=\"language-text\">proposal_name</code> proposal. Storage changes are billed to <code class=\"language-text\">proposer</code>. </p>\n<table>\n<thead>\n<tr>\n<th>Parameter Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>proposer</td>\n<td>- The account proposing a transaction</td>\n</tr>\n<tr>\n<td>proposal_name</td>\n<td>- The name of the proposal (should be unique for proposer)</td>\n</tr>\n<tr>\n<td>level</td>\n<td>- Permission level approving the transaction</td>\n</tr>\n<tr>\n<td>proposal_hash</td>\n<td>- Transaction's checksum</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"unapprove\">unapprove</h2>\n<p><strong>Type:</strong> <code class=\"language-text\">void</code></p>\n<p>Revoke proposal </p>\n<p>This action is the reverse of the <code class=\"language-text\">approve</code> action: if all validations pass\nthe <code class=\"language-text\">level</code> permission is erased from internal <code class=\"language-text\">provided_approvals</code> and added to the internal\n<code class=\"language-text\">requested_approvals</code> list, and thus un-approve or revoke the proposal. </p>\n<table>\n<thead>\n<tr>\n<th>Parameter Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>proposer</td>\n<td>- The account proposing a transaction</td>\n</tr>\n<tr>\n<td>proposal_name</td>\n<td>- The name of the proposal (should be an existing proposal)</td>\n</tr>\n<tr>\n<td>level</td>\n<td>- Permission level revoking approval for proposal</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"cancel\">cancel</h2>\n<p><strong>Type:</strong> <code class=\"language-text\">void</code></p>\n<p>Cancel proposal </p>\n<table>\n<thead>\n<tr>\n<th>Parameter Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>proposer</td>\n<td>- The account proposing a transaction</td>\n</tr>\n<tr>\n<td>proposal_name</td>\n<td>- The name of the proposal (should be an existing proposal)</td>\n</tr>\n<tr>\n<td>canceler</td>\n<td>- The account cancelling the proposal (only the proposer can cancel an unexpired transaction, and the canceler has to be different than the proposer)  Allows the <code class=\"language-text\">canceler</code> account to cancel the <code class=\"language-text\">proposal_name</code> proposal, created by a <code class=\"language-text\">proposer</code>, only after time has expired on the proposed transaction. It removes corresponding entries from internal proptable and from approval (or old approvals) tables as well.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"exec\">exec</h2>\n<p><strong>Type:</strong> <code class=\"language-text\">void</code></p>\n<p>Execute proposal </p>\n<p>Preconditions: </p>\n<ul>\n<li><code class=\"language-text\">executer</code> has authorization, </li>\n<li><code class=\"language-text\">proposal_name</code> is found in the proposals table, </li>\n<li>all requested approvals are received, </li>\n<li>proposed transaction is not expired, </li>\n<li>and approval accounts are not found in invalidations table. </li>\n</ul>\n<p>If all preconditions are met the transaction is executed as a deferred transaction,\nand the proposal is erased from the proposals table. </p>\n<table>\n<thead>\n<tr>\n<th>Parameter Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>proposer</td>\n<td>- The account proposing a transaction</td>\n</tr>\n<tr>\n<td>proposal_name</td>\n<td>- The name of the proposal (should be an existing proposal)</td>\n</tr>\n<tr>\n<td>executer</td>\n<td>- The account executing the transaction</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"invalidate\">invalidate</h2>\n<p><strong>Type:</strong> <code class=\"language-text\">void</code></p>\n<p>Invalidate proposal </p>\n<p>the invalidations table and this table will be cross referenced when exec is performed. </p>\n<table>\n<thead>\n<tr>\n<th>Parameter Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>account</td>\n<td>- The account invalidating the transaction</td>\n</tr>\n</tbody>\n</table>","tableOfContents":"<ul>\n<li><a href=\"/eosio.contracts/latest/action-reference/eosio.msig/index/#multisig\">multisig</a></li>\n<li><a href=\"/eosio.contracts/latest/action-reference/eosio.msig/index/#propose\">propose</a></li>\n<li><a href=\"/eosio.contracts/latest/action-reference/eosio.msig/index/#approve\">approve</a></li>\n<li><a href=\"/eosio.contracts/latest/action-reference/eosio.msig/index/#unapprove\">unapprove</a></li>\n<li><a href=\"/eosio.contracts/latest/action-reference/eosio.msig/index/#cancel\">cancel</a></li>\n<li><a href=\"/eosio.contracts/latest/action-reference/eosio.msig/index/#exec\">exec</a></li>\n<li><a href=\"/eosio.contracts/latest/action-reference/eosio.msig/index/#invalidate\">invalidate</a></li>\n</ul>","frontmatter":{"edit_link":null,"request_changes_link":null},"fields":{"articleTitle":"NULL","contentTitle":"Latest","headTagTitle":"action-referenceeosiomsig","internalSummary":"/usr/local/lib/python3.6/dist-packages/thorka-0.1-py3.6.egg/src/lib/gatsby/data/latest/SUMMARY.json","isCollection":false,"isRoot":true,"isTagged":true,"organization":"EOSIO","originalKey":"/","pathData":"{\"tagged\":true,\"parentPath\":\"latest/action-reference/eosio.msig\",\"collectionPath\":\"/\",\"rootDirPath\":\"latest\",\"filename\":\"index.md\"}","repository":"eosio.contracts","showSearch":true,"slug":"/latest/action-reference/eosio.msig/index","tagsList":"[{\"beta\":null,\"build\":null,\"deprecated\":false,\"latest\":true,\"rc\":0,\"tag\":\"v1.8.0\",\"tag_reduced\":\"1.8\",\"tag_reduced_friendly\":\"v1.8\",\"tag_sanitized\":\"1.8.0\",\"summaryPath\":\"/usr/local/lib/python3.6/dist-packages/thorka-0.1-py3.6.egg/src/lib/gatsby/data/latest/SUMMARY.json\",\"importedSummary\":\"N/A\",\"version\":\"latest\"}]","latestDDVersion":"latest","importedSummary":"N/A","hasPrimaryNavigation":false,"primaryNavData":"[{\"text\":\"NONE\",\"path\":\"EMPTY\"}]","currentVersion":"latest","currentDDVersion":"1.8","summaryJson":"{\"array\":[{\"title\":\"Build And Deploy\",\"link\":\"build-and-deploy.md\"},{\"sub\":[{\"title\":\"Upgrading The Eosio.system Contract\",\"link\":\"guides/upgrading-the-eosio.system-contract.md\"},{\"title\":\"How To Buy Ram\",\"link\":\"guides/how-to-buy-ram.md\"},{\"title\":\"How To Stake\",\"link\":\"guides/how-to-stake.md\"},{\"title\":\"How To Vote\",\"link\":\"guides/how-to-vote.md\"},{\"title\":\"How To Create Issue And Transfer A Token\",\"link\":\"guides/how-to-create-issue-and-transfer-a-token.md\"},{\"title\":\"How To Sign A Multisig Transaction With Eosio.msig\",\"link\":\"guides/how-to-sign-a-multisig-transaction-with-eosio.msig.md\"},{\"title\":\"How To Use Eosio.wrap\",\"link\":\"guides/how-to-use-eosio.wrap.md\"}],\"title\":\"Guides\"},{\"sub\":[{\"sub\":[],\"title\":\"eosio.bios\",\"link\":\"action-reference/eosio.bios\"},{\"sub\":[],\"title\":\"eosio.msig\",\"link\":\"action-reference/eosio.msig\"},{\"sub\":[{\"title\":\"native\",\"link\":\"action-reference/eosio.system/native.md\"},{\"title\":\"rex.results\",\"link\":\"action-reference/eosio.system/rex.results.md\"}],\"title\":\"eosio.system\",\"link\":\"action-reference/eosio.system\"},{\"sub\":[],\"title\":\"eosio.token\",\"link\":\"action-reference/eosio.token\"},{\"sub\":[],\"title\":\"eosio.wrap\",\"link\":\"action-reference/eosio.wrap\"}],\"title\":\"Action Reference\"}],\"title\":[]}"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/latest/action-reference/eosio.msig/index"}}}